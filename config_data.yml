
# This config file is for use with the `build_data` and `check_data` functions,
# which are helpers for implementations of Open SDG. This file allows easy use
# of those functions without altering Python code.

# The following should be changed according to the hosting environment. In the most
# common environment, Github Pages, you would need to set this according to the name
# of this repository, after a preceding slash. Eg: /my-repository-name
docs_baseurl: /nsdp-upgrade

# Languages
# ---------
# This tells sdg-build to perform "translated builds" for each of the specified
# languages. Each build is in its own subfolder - one for each language.
languages:
  - en

# Destination directory
# ---------------------
# This identifies a directory to hold the "built" files. The default is '_site'.
# Here we use '_build' to avoid conflicting with Jekyll, which uses '_site'.
site_dir: _build

# Schema file
# -----------
# This identifies a file containing the schema (possible fields) for metadata.
schema_file: metadata-schema.yml

# Source directory
# ----------------
# This identifies the directory that holds the 'data' and 'meta' folders.
# The default, '', points to the root of this repository.
src_dir: ''

# Inputs
# ------
# The allows control over the inputs of data and metadata. This can be omitted
# if you are using the standard Open SDG approach of CSV data and YAML metadata.
# But if you would like to use non-standard inputs (such as SDMX) then you can
# use this as needed.
#
# Each item must have a "class" which corresponds to classes in the sdg/inputs
# folder. Further, each item can have any/all of the parameters that class uses.
# The defaults below show what is used when this is omitted.
inputs:
  - class: InputCsvData
    path_pattern: data/*.csv
  - class: InputYamlMeta
    path_pattern: meta/*.yml
    git: true
    git_data_dir: data
  - class: InputYamlMeta
    path_pattern: indicators/*.yml
    git: false
  - class: InputYamlMeta
    path_pattern: progress/*.yml
    git: false
  - class: InputYamlMeta
    path_pattern: map-points/*.yml
    git: false

# Translations
# ------------
# The allows control over the imported translations. This can be omitted if you
# are happy with the defaults. But if you are using custom translation repos
# or non-standard inputs (such as SDMX) then you can use this as needed.
#
# Each item must have a "class" which corresponds to classes in the sdg-build
# project. Further, each item can have any/all of the parameters that class uses.
# The defaults below show what is used when this is omitted.
translations:
  # This pulls in translations from a Git repository.
  - class: TranslationInputSdgTranslations
    source: https://github.com/open-sdg/sdg-translations.git
    tag: 2.2.0-beta1
  # This pulls in translations from a local 'translations' folder.
  - class: TranslationInputYaml
    source: translations

# Reporting status extra fields
# -----------------------------
# This allows the build to generate stats for reporting status by additional
# fields, beyond the default "status by goal" report.
reporting_status_extra_fields: []

indicator_downloads:
  - button_label: Full dataset
    source_pattern: full-datasets/*.csv
    output_folder: full-datasets
    indicator_id_pattern: full_(.*)

# Map layers
# ----------
# This allows the build to generate one or more GeoJSON files to be used by
# Open SDG maps. The parameters available correspond to the OutputGeoJson class.
# See sdg/outputs/OutputGeoJson.py for more information. Uncomment the map_layers
# below and adjust if you would like to use the Open SDG mapping functionality.
# Note that the GeoJSON files can either be remote (as in the example below) or
# local, relative to the src_dir specified above.
map_layers:
  - geojson_file: geojson/vut_admbnda_adm1_spc_20180824.json
    name_property: admin1Name_en
    id_property: admin1Pcode
    output_subfolder: provinces
  - geojson_file: geojson/vut_admbnda_adm2_spc_20180824.json
    name_property: admin2Name_en
    id_property: admin2Pcode
    output_subfolder: area-councils

# Documentation settings
# ----------------------
# This controls the automatic documentation that is created for your build.
#
# This is the logo at the top of the automated documentation pages.
docs_branding: SDG data build documentation
# This displays at the top of the automated documentation homepage.
docs_intro: This is a list of examples of endpoints and output that are
  available on this service. Click each of the links below for more information
  on the available output.
docs_subfolder: data-docs
# This can be uncommented and updated so allow links to your indicator pages.
# The URL here should have [id] instead of the indicator ID.
#docs_indicator_url: https://my-github-org/my-site-repository/[id]

# This allows the CSV files to control the order of disaggregations on indicator pages.
# More infomation: https://github.com/Vanuatu-National-Statistics-Office/vnso-nsdp-platform/wiki/Controlling-the-order-of-disaggregations
datapackage:
  sorting: default
